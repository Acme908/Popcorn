configuration: Release
image: Visual Studio 2017

install: 
- cmd: set PATH=C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\MSBuild\15.0\Bin;C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\MSBuild\15.0\Bin;C:\Program Files (x86)\Microsoft Visual Studio\2017\Professional\MSBuild\15.0\Bin;%PATH%

- ps: |
    # Download Coverity Scan toolset, if we are doing scheduled build.
    Invoke-WebRequest `
      -Uri "https://scan.coverity.com/download/cxx/win_64" `
      -Body @{ project = "$env:APPVEYOR_REPO_NAME";
               token = "$env:COVERITY_TOKEN" } `
      -OutFile "$env:APPVEYOR_BUILD_FOLDER\coverity.zip"

    Add-Type -AssemblyName "System.IO.Compression.FileSystem"
    
    [IO.Compression.ZipFile]::ExtractToDirectory(
      "$env:APPVEYOR_BUILD_FOLDER\coverity.zip",
      "$env:APPVEYOR_BUILD_FOLDER")

build_script:
- ps: |
    nuget restore
    
    $buildCmd = "msbuild.exe"
    $buildArgs = @(
      "/m",
      "/l:C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll",
      "/p:Configuration=$env:CONFIGURATION",
      "/p:Platform=$env:PLATFORM")
  
    "Building project with Coverity..."
    & ".\cov-analysis-win64-8.7.0\bin\cov-build.exe" `
      --dir cov-int `
      --encoding=UTF-8 `
      $buildCmd $buildArgs
      
    # Compress results.
    "Compressing Coverity results..."
    $zipEncoderDef = @'
      namespace AnalyzeCode {
        public class PortableFileNameEncoder: System.Text.UTF8Encoding {
          public PortableFileNameEncoder() {}
          public override byte[] GetBytes(string entry) {
            return base.GetBytes(entry.Replace("\\", "/"));
          }
        }
      }
    '@
    Add-Type -TypeDefinition $zipEncoderDef
    [IO.Compression.ZipFile]::CreateFromDirectory(
      "$env:APPVEYOR_BUILD_FOLDER\cov-int",
      "$env:APPVEYOR_BUILD_FOLDER\$env:APPVEYOR_PROJECT_NAME.zip",
      [IO.Compression.CompressionLevel]::Optimal,
      $true,  # include root directory
      (New-Object AnalyzeCode.PortableFileNameEncoder))
    
    # Upload results to Coverity server.
    "Uploading Coverity results..."
    Add-Type -AssemblyName "System.Net.Http"
    $client = New-Object Net.Http.HttpClient
    $client.Timeout = [TimeSpan]::FromMinutes(30)
    $form = New-Object Net.Http.MultipartFormDataContent
    # Fill token field.
    [Net.Http.HttpContent]$formField =
      New-Object Net.Http.StringContent($env:COVERITY_TOKEN)
    $form.Add($formField, "token")
    # Fill email field.
    $formField =
      New-Object Net.Http.StringContent($env:COVERITY_EMAIL)
    $form.Add($formField, "email")
    # Fill file field.
    $fs = New-Object IO.FileStream(
      "$env:APPVEYOR_BUILD_FOLDER\$env:APPVEYOR_PROJECT_NAME.zip",
      [IO.FileMode]::Open,
      [IO.FileAccess]::Read)
    $formField = New-Object Net.Http.StreamContent($fs)
    $form.Add($formField, "file", "$env:APPVEYOR_PROJECT_NAME.zip")
    # Fill version field.
    $version = "$env:VersionMajor.$env:VersionMinor.$env:VersionPatch" +
      "-$env:VersionStage+$env:VersionBuild"
    $formField = New-Object Net.Http.StringContent($version)
    $form.Add($formField, "version")
    # Fill description field.
    $formField =
      New-Object Net.Http.StringContent("Scheduled CI server build.")
    $form.Add($formField, "description")
    # Submit form.
    $url = "https://scan.coverity.com/builds?project=$env:APPVEYOR_REPO_NAME"
    $task = $client.PostAsync($url, $form)
    try {
      $task.Wait()  # throws AggregateException on time-out
    } catch [AggregateException] {
      throw $_.Exception.InnerException
    }
    $task.Result
    $fs.Close()

test_script:
- ps: >-
    .\packages\OpenCover.4.6.519\tools\OpenCover.Console.exe -register:user -target:nunit3-console.exe "-targetargs:""Popcorn.Tests\bin\$env:CONFIGURATION\Popcorn.Tests.dll""" -filter:"+[Popcorn*]*" -output:opencoverCoverage.xml

    $coveralls = (Resolve-Path "packages/coveralls.net.*/tools/csmacnz.coveralls.exe").ToString()
    
    $env:APPVEYOR_BUILD_NUMBER
    
    & $coveralls --opencover -i opencoverCoverage.xml --repoToken $env:COVERALLS_REPO_TOKEN --useRelativePaths --commitId $env:APPVEYOR_REPO_COMMIT --commitBranch $env:APPVEYOR_REPO_BRANCH --commitAuthor $env:APPVEYOR_REPO_COMMIT_AUTHOR --commitEmail $env:APPVEYOR_REPO_COMMIT_AUTHOR_EMAIL --commitMessage $env:APPVEYOR_REPO_COMMIT_MESSAGE --jobId $env:APPVEYOR_BUILD_NUMBER --serviceName appveyor